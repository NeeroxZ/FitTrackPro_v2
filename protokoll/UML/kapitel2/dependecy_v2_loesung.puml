@startuml
title Lösung mit Port-Interface (ExportWorkoutHistoryService)

' ======= Schichtendarstellung =======
    class core.usecase.workout.export.ExportWorkoutHistoryService{
    - repo : InMemoryWorkoutRepository
    + ExportWorkoutHistory(InMemoryWorkoutRepository)
    + export(String, Path)

}


package "core.ports.repository" {
    interface IWorkoutRepository {
        + saveWorkout(workout)
        + findAll()
        + findById(id)
        + findByUser(username)
        + deleteById(id)
    }
  }


 package "adapters.persistence.inmemory" {
     class InMemoryWorkoutRepository {
         - workouts: List
         - idCounter: AtomicInteger
         + saveWorkout(workout)
         + findAll()
         + findById(id)
         + findByUser(username)
         + deleteById(id)
     }
 }

' ======= Regelkonforme Abhängigkeiten =======
ExportWorkoutHistoryService --> IWorkoutRepository


InMemoryWorkoutRepository ..|> IWorkoutRepository

note right of ExportWorkoutHistoryService
  High-Level-Use-Case kennt nur die
  Abstraktion (Port).
  Der konkrete Adapter implementiert
  das Interface – Abhängigkeit zeigt
  nach innen. Dependency Rule erfüllt.
end note
@enduml